#! /bin/bash

test -z "$LSG" && LSG="lsg-gss3.netmgmt.akamai.com"
GLOBAL_SERVER=/a/tools/metadata/ghostdir.ca.list/global_server.xml
STORE_AS_PEM_TGZ=https://nabla-c0d3.github.io/trust_stores_observatory/trust_stores_as_pem.tar.gz
CHROME_ROOTS_TGZ=https://chromium.googlesource.com/chromium/src/+archive/main/net/data/ssl/chrome_root_store.tar.gz

redigest() {
    sha=$(openssl x509 -fingerprint -sha256 -noout <$1)
    sha=$(echo $sha | sed -e s/.*Fingerprint=// -e s/://g)
    openssl x509 -text <$1 >$sha
    rm $1
}

# Get the CPS repository
if ! test -d cps-engine-api ; then
    echo "Cloning cps-engine-api repository"
    git clone -q ssh://git@git.source.akamai.com:7999/sources/cps-engine-api.git
else
    echo "Uopdating cps-engine-api repository"
    cd cps-engine-api
    git pull -q
    cd ..
fi
CPSXML=cps-engine-api/cps-engine/config/global_server.xml
if ! test -f $CPSXML ; then
    echo File does not exist: $CPSML
    exit 1
fi

rm -rf certs.aka-cps
mkdir certs.aka-cps
cd certs.aka-cps
../split-permissive.py ../$CPSXML
for CERT in * ; do
    redigest $CERT
done
echo CPS has $(ls | wc -l)
cd ..

# Write out akamai-permissive set
if ! scp -pq ${LSG}:${GLOBAL_SERVER} . ; then
    echo 'ERROR: failed to fetch global_server.xml.'
    exit 1
fi
rm -rf certs.akamai
mkdir certs.akamai
cd certs.akamai
../split-permissive.py ../global_server.xml
for CERT in * ; do
    redigest $CERT
done
echo Permissive-set has $(ls | wc -l)
cd ..

# Write out all CAs in global-server file
rm -rf certs.aka-gs
mkdir certs.aka-gs
cd certs.aka-gs
../split-gs.py ../global_server.xml
for CERT in * ; do
    redigest $CERT
done
echo Global-server has $(ls | wc -l)
cd ..

rm -rf trust_stores_as_pem*
curl --silent --show-error --remote-name $STORE_AS_PEM_TGZ
mkdir trust_stores_as_pem
cd trust_stores_as_pem
tar zxf ../trust_stores_as_pem.tar.gz
cd ..

for WHO in apple google microsoft mozilla ; do
    rm -rf certs.$WHO
    mkdir certs.$WHO
    cd certs.$WHO
    ../split-pem.pl <../trust_stores_as_pem/${WHO}*.pem
    for CERT in * ; do
	redigest $CERT
    done
    echo $WHO has $(ls |wc -l)
    cd ..
done


# Scrape the Chrome root store.
rm -rf certs.gtrust
mkdir certs.gtrust
curl --output - --location --silent --show-error $CHROME_ROOTS_TGZ | tar zxf - root_store.certs
cd certs.gtrust
../split-pem.pl <../root_store.certs
for CERT in * ; do
    redigest $CERT
done
echo Chrome root store has $(ls | wc -l)
cd ..
rm root_store.certs
